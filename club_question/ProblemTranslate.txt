원래 수와 뒤집은 수를 합한 수가 좌우 대칭이 되는지 테스트 하는 프로그램 작성
입력 첫줄에 테스트 케이스의 개수 T 받기
각 테스트 케이스는 한 줄에 하나의 정수 N(10 ≤ N ≤ 100000)이 주어짐

각 테스트 케이스에 대해서 원래 수와 뒤집은 수를 합한 수가
좌우 대칭이 되면 YES를 아니면 NO를 한 줄에 하나씩 출력함

-분석
 만약 3자리 수를 뒤집는다면
=> 1의 자리 -> 100의 자리  =>  0 2개 추가  ==>  1 * 10*10
    10의 자리 -> 10의 자리  =>  0 0개 추가  ==>  10 * 1
    100의 자리 -> 1의 자리  =>  0 -2개 추가  ==>  100 * (1/10)*(1/10)

 만약 4자리 수를 뒤집는다면
=> 1의 자리 -> 1000의 자리
    10의 자리 -> 100의 자리
    100의 자리 -> 10의 자리
    1000의 자리 -> 1의 자리   

정리해보자면
 10^n의 자리 * (10^자리수의 갯수/10^n) + 
 10^2의 자리 * (10^자리수의 갯수/10^2) +
 10^1의 자리 * (10^자리수의 갯수/10^1) + 
 .
 .
 .
 + 10^0의 자리 * 10^자리수의 갯수
 자리수는 10^0의 자리에서 10의 제곱만큼씩 커지고, 곱하는 수는 10^자리수에서 10의 제곱만큼씩 작아짐
 즉,  자리수가 작아질수록 곱하는 수가 커짐

그렇다면
 기존 수는 단계마다 계속 10으로 나눠주고, 



뒤집은 수 + 원래 수를 저장한 후 각 자리수를 떼어 내 (첫번째+n)자리와 (마지막-n)자리 비교
모두 똑같으면 true, 아니면 false

-설계
 // 수 뒤집기
 자리수변수 = 기존 수 % 10 // 일의 자리 구하기
 남은수변수 = 기존 수 / 10 // 
 
 // 좌우 대칭 판별
 변수 = 뒤집은 수 + 기존 수
 







